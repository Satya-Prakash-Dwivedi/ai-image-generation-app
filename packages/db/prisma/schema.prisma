// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../backend/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  clerkId        String   @unique
  email          String   @unique
  name           String?
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Model {
  id           String         @id @default(uuid())
  name         String
  type         ModelTypeEnum
  age          Int
  ethinicty    EthenicityEnum
  eyeColor     EyeColorEnum
  bald         Boolean
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  OutputImages OutputImages[]
}

model OutputImages {
  id       String            @id @default(uuid())
  imageUrl String            @default("")
  modelId  String
  userID   String
  prompt   String
  status   outputImageStatus @default(Pending)
  model    Model             @relation(fields: [modelId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Packs {
  id          String        @id @default(uuid())
  name        String
  description String        @default("")
  imageUrl1   String        @default("")
  imageUrl2   String        @default("")
  prompts     PackPrompts[]
}

model PackPrompts {
  id     String @id @default(uuid())
  prompt String
  packId String
  pack   Packs  @relation(fields: [packId], references: [id])
}

enum outputImageStatus {
  Pending
  Generated
  Failed
}

enum ModelTrainigStatus {
  Pending
  Generated
  Failed
}

enum PlanType {
  basic
  premium
}

enum ModelTypeEnum {
  Man
  Women
  Others
}

enum EthenicityEnum {
  White
  Black
  Asian_American    @map("Asian American")
  East_Asian        @map("East Asian")
  South_East_Asian  @map("South East Asian")
  South_Asian       @map("South Asian")
  Middle_Eastern    @map("Middle Eastern")
  Pacific
  Hispanic
}

enum EyeColorEnum {
  Brown
  Blue
  Hazel
  Gray
}
